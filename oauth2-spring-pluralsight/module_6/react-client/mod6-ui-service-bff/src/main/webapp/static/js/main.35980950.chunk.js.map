{"version":3,"sources":["services/AuthService.tsx","actions/protfolioActions.tsx","components/PositionItem.tsx","components/AddTransactionForm.tsx","components/Positions.tsx","components/TransactionItem.tsx","components/Transactions.tsx","components/Header.tsx","components/Portfolio.tsx","reducers/portfolioReducer.tsx","reducers/index.tsx","components/login/LoginForm.tsx","components/login/ProtectedRoute.tsx","components/support/QueryItem.tsx","components/support/QueryPost.tsx","components/support/Queries.tsx","actions/supportActions.tsx","components/support/AddQueryForm.tsx","components/support/UserSupport.tsx","App.tsx","store/store.tsx","serviceWorker.ts","index.tsx"],"names":["AuthService","Object","classCallCheck","this","userManager","UserManager","authority","client_id","redirect_uri","response_type","scope","events","addUserLoaded","Log","logger","console","level","INFO","createClass","key","value","sessionStorage","getItem","signinRedirectCallback","then","user","setItem","access_token","catch","error","log","getUser","signinRedirect","signinSilent","signoutRedirect","Authorization","undefined","instance","getPortfolioPositionsCreator","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","dispatch","response","portfolioState","gotPositionsAction","wrap","_context","prev","next","axios","get","headers","getInstance","getHeader","sent","data","type","positions","stop","_x","apply","arguments","getPortfolioTransactionsCreator","transactionType","length","_ref2","_callee2","transactionsList","_context2","transactions","_x2","PositionItem","props","position","react","cryptoCurrency","symbol","quantity","AddTransactionForm","_this","possibleConstructorReturn","getPrototypeOf","call","state","cryptoSymbol","price","onChange","bind","assertThisInitialized","onSelectChange","handleSubmit","e","setState","defineProperty","target","name","preventDefault","transaction","addTransaction","className","onSubmit","required","React","connect","history","_ref3","_callee3","_context3","post","_x3","addPortfolioTransactionCreator","Positions","map","components_PositionItem","components_AddTransactionForm","TransactionItem","id","handleCheckboxChange","Transactions","event","toggleCheckbox","transactionId","selectedTransactionIds","has","delete","add","Set","loadTransactions","deleteTransactions","Array","from","_this2","index","components_TransactionItem","portfolioTransactions","transactionIds","_ref4","_callee4","_context4","_x4","deleteTransactionsCreator","Header","href","Link","to","Portfolio","loadPositions","components_Header","Switch","Route","path","component","components_Positions","portfolio","portfolioInitialState","supportInitialState","queries","portfolioTransactionsInitialState","combineReducers","action","support","LoginForm","authService","login","ProtectedRoute","_Route","inherits","redirectPath","isAuthenticated","authenticationPath","assign","Redirect","pathname","render","QueryItem","query","onClick","onTableRowClick","subject","username","resolved","creationTime","QueryPost","content","Queries","displayPostsForQuery","currentTarget","queriesList","find","q","support_QueryPost","posts","support_QueryItem","getSupportQueriesCreator","AddQueryForm","navToMainSupportPage","addQuery","put","addQueryCreator","UserSupport","loadQueries","support_Queries","App","initialState","defaultProtectedRouteProps","react_default","createElement","es","store","createStore","rootReducer","compose","applyMiddleware","thunk","BrowserRouter","es_Route","ProtectedRoute_ProtectedRoute","exact","Component","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.35980950.chunk.js","sourcesContent":["import { Log, User, UserManager , WebStorageStateStore} from 'oidc-client';\r\n\r\nexport class AuthService {\r\n  private userManager: UserManager;\r\n  private static instance: AuthService;\r\n\r\n  constructor() {\r\n    const settings = {\r\n      authority: \"http://localhost:8081/auth/realms/CryptoInc\",\r\n      client_id: \"crypto-portfolio-react\",\r\n      redirect_uri: \"http://localhost:3000/callback.html\",\r\n      response_type: 'id_token token',\r\n      scope: \"openid profile email\"\r\n    };\r\n    this.userManager = new UserManager(settings);\r\n    this.userManager.events.addUserLoaded\r\n    Log.logger = console;\r\n    Log.level = Log.INFO;\r\n    \r\n  }\r\n\r\n  public static getInstance(): AuthService {\r\n    if (AuthService.instance === undefined) {\r\n      AuthService.instance = new AuthService();\r\n    }\r\n    return AuthService.instance;\r\n  }\r\n\r\n  public isAuthenticated() : boolean{    \r\n    if (sessionStorage.getItem(\"access_token\")) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  public completeLogin() {\r\n    this.userManager.signinRedirectCallback()\r\n       .then(user => sessionStorage.setItem(\"access_token\",user.access_token))\r\n       .catch((error) => console.log(error));\r\n }\r\n\r\n\r\n  public getUser(): Promise<User | null> {\r\n    return this.userManager.getUser();\r\n  }\r\n\r\n  public login(): Promise<void> {\r\n    return this.userManager.signinRedirect();\r\n  }\r\n\r\n  public renewToken(): Promise<User> {\r\n    return this.userManager.signinSilent();\r\n  }\r\n\r\n  public logout(): Promise<void> {\r\n    return this.userManager.signoutRedirect();\r\n  }\r\n\r\n  public getHeader() {\r\n    return  {\r\n      'Authorization': 'Bearer ' + sessionStorage.getItem(\"access_token\")\r\n    };\r\n  }\r\n\r\n}","import axios from \"axios\";\r\nimport {GotPositionsAction, PortfolioState,AddPortfolioTransaction, GotPortfolioTransactionsAction, Transaction, DeletePortfolioTransactions} from \"./types\";\r\nimport { ActionCreator, Dispatch } from \"redux\";\r\nimport { ThunkAction, ThunkDispatch } from \"redux-thunk\";\r\nimport { AuthService } from \"../services/AuthService\";\r\n\r\nexport const getPortfolioPositionsCreator: ActionCreator<\r\n    ThunkAction<\r\n        void,\r\n        undefined,\r\n        null,\r\n        GotPositionsAction\r\n        >\r\n    > = () => {\r\n        return async (dispatch : Dispatch) => {\r\n            const response = await axios.get('http://localhost:8180/portfolio',\r\n            {headers:AuthService.getInstance().getHeader()});\r\n            const portfolioState : PortfolioState = response.data;\r\n            const gotPositionsAction : GotPositionsAction = {\r\n                type : \"GotPositions\",\r\n                positions: portfolioState.positions\r\n            };  \r\n            dispatch(gotPositionsAction);\r\n        };\r\n    };\r\n\r\nexport const getPortfolioTransactionsCreator: ActionCreator<\r\n    ThunkAction<\r\n        void,\r\n        undefined,\r\n        null,\r\n        GotPortfolioTransactionsAction\r\n    >\r\n> = (transactionType : string = \"\") => {\r\n    return async (dispatch : Dispatch) => {\r\n    \r\n        const response = await axios.get('http://localhost:8180/portfolio/transactions/'+transactionType,\r\n        {headers: AuthService.getInstance().getHeader()});\r\n        const transactionsList : Transaction[] = response.data;\r\n        const gotTransactionsAction : GotPortfolioTransactionsAction = {\r\n            type: 'GotTransactions',\r\n            transactions : transactionsList\r\n        }\r\n        dispatch(gotTransactionsAction)\r\n    }\r\n}\r\n\r\nexport const addPortfolioTransactionCreator : ActionCreator<\r\n    ThunkAction<\r\n        void,\r\n        undefined,\r\n        null,\r\n        AddPortfolioTransaction\r\n    >\r\n    > = (transaction: AddPortfolioTransaction) => {\r\n        return async (dispatch :  ThunkDispatch<{},{},any>) => {\r\n            const response = await axios.post('http://localhost:8180/portfolio/transactions', transaction,\r\n            {headers: AuthService.getInstance().getHeader()});\r\n            dispatch(getPortfolioPositionsCreator());\r\n        }\r\n    }\r\n\r\nexport const deleteTransactionsCreator : ActionCreator<\r\n    ThunkAction<\r\n        void,\r\n        undefined,\r\n        null,\r\n        DeletePortfolioTransactions\r\n    >\r\n> = (transactionIds : string[]) => {\r\n    return async (dispatch :  ThunkDispatch<{},{},any>) => {\r\n        const response = await axios.delete('http://localhost:8180/portfolio/transactions',{data: {id: transactionIds},headers: AuthService.getInstance().getHeader()})\r\n        dispatch(getPortfolioTransactionsCreator());\r\n        dispatch(getPortfolioPositionsCreator());      \r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport { Position } from '../actions/types';\r\n\r\ninterface PositionItemProps {\r\n    position: Position\r\n}\r\n\r\nconst PositionItem: React.SFC<PositionItemProps>  = (props) => {\r\n    const position = props.position;\r\n    return <tr>\r\n        <th>{position.cryptoCurrency.symbol}</th>\r\n        <th>{position.quantity}</th>\r\n        <th>{position.value}</th>\r\n    </tr>\r\n}\r\n\r\nexport default PositionItem","import * as React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {addPortfolioTransactionCreator} from '../actions/protfolioActions';\r\nimport { AddPortfolioTransaction } from '../actions/types';\r\nimport { ThunkDispatch } from 'redux-thunk';\r\nimport { History } from 'history';\r\n\r\ninterface AddTransactionFormProps {\r\n    addTransaction?: Function;\r\n}\r\n\r\ninterface AddTransactionsFormState {\r\n    cryptoSymbol: string,\r\n    type: string,\r\n    quantity: number,\r\n    price: number\r\n}\r\n\r\nclass AddTransactionForm extends React.Component<AddTransactionFormProps, any> {\r\n\r\n    constructor(props:AddTransactionFormProps) {\r\n        super(props);\r\n        this.state = {\r\n            cryptoSymbol: \"\",\r\n            type: \"\",\r\n            quantity: 0,\r\n            price: 0\r\n        }\r\n        this.onChange=this.onChange.bind(this);\r\n        this.onSelectChange=this.onSelectChange.bind(this);\r\n        this.handleSubmit=this.handleSubmit.bind(this);\r\n    }\r\n\r\n    onChange(e: React.ChangeEvent<HTMLInputElement>) {\r\n        this.setState({ [e.target.name]: e.target.value});\r\n    }\r\n\r\n    onSelectChange(e: React.ChangeEvent<HTMLSelectElement>) {\r\n        this.setState({ [e.target.name]: e.target.value});\r\n    }\r\n\r\n    handleSubmit(e: React.FormEvent<HTMLFormElement>) {\r\n        e.preventDefault();\r\n        const transaction = {\r\n            cryptoSymbol: this.state.cryptoSymbol,\r\n            price: this.state.price,\r\n            quantity: this.state.quantity,\r\n            transactionType: this.state.type\r\n        };\r\n        if(this.props.addTransaction !== undefined) {\r\n            this.props.addTransaction(transaction);\r\n        }\r\n    }\r\n\r\n  public render() {\r\n    return (\r\n        <div className=\"container add_trans_div\">\r\n            <form onSubmit={this.handleSubmit}>\r\n                <fieldset>\r\n                    <label>Symbol</label>\r\n                    <select name = \"cryptoSymbol\" required={true} value={this.state.cryptoSymbol} onChange={this.onSelectChange}>\r\n                        <option value=\"\">----Select----</option>\r\n                        <option value=\"BTC\">BTC</option>\r\n                        <option value=\"LTC\">LTC</option>\r\n                    </select>\r\n                    <label>Symbol</label>\r\n                    <select name=\"type\" required={true} value = {this.state.type} onChange={this.onSelectChange}>\r\n                        <option value=\"\">----Select----</option>\r\n                        <option value=\"BUY\">BUY</option>\r\n                        <option value=\"SELL\">SELL</option>\r\n                    </select>     \r\n                    <label>Quantity</label> \r\n\t\t\t\t    <input type=\"number\" name=\"quantity\" required={true} value={this.state.quantity} onChange={this.onChange}/>\r\n                    <label>Price</label> \r\n\t\t\t\t    <input type=\"number\" name=\"price\" required={true} value={this.state.price} onChange={this.onChange}/>\r\n\t\t\t\t    <button name=\"addTransactionBtn\" type=\"submit\">Add Transaction</button>               \r\n                </fieldset>\r\n            </form>\r\n\t    </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch : ThunkDispatch<{},{},any>) => ({\r\n    addTransaction: (transaction: AddPortfolioTransaction, history: History) => dispatch(addPortfolioTransactionCreator(transaction, history))\r\n  });\r\n\r\n\r\nexport default connect(null,mapDispatchToProps)(AddTransactionForm);\r\n","import * as React from \"react\";\r\nimport { Position } from \"../actions/types\";\r\nimport PositionItem from \"./PositionItem\";\r\nimport AddTransactionForm from \"./AddTransactionForm\";\r\n\r\ninterface PositionsProps {\r\n  positions: Position[];\r\n}\r\n\r\nclass Positions extends React.Component<PositionsProps> {\r\n  public render() {\r\n    return (\r\n      <React.Fragment>\r\n        <table className=\"table table-hover\">\r\n          <thead>\r\n            <tr>\r\n              <th>Symbol</th>\r\n              <th>Quantity</th>\r\n              <th>Value</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {this.props.positions.map(position => (\r\n              <PositionItem\r\n                key={position.cryptoCurrency.symbol}\r\n                position={position}\r\n              />\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n        <AddTransactionForm />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Positions;\r\n","import * as React from 'react';\r\nimport { Transaction } from '../actions/types';\r\n\r\ninterface TransactionItemProps {\r\n    transaction: Transaction;\r\n    handleCheckboxChange : React.ChangeEventHandler;\r\n}\r\n\r\nconst TransactionItem: React.SFC<TransactionItemProps> = (props) => {\r\n  return <tr>\r\n  <th><input id ={props.transaction.id} name=\"selectedTransaction\" type=\"checkbox\" onChange ={props.handleCheckboxChange} value={props.transaction.id} /></th>\r\n  <th>{props.transaction.id}</th>\r\n  <th>{props.transaction.symbol}</th>\r\n  <th>{props.transaction.transactionType}</th>\r\n  <th>{props.transaction.quantity}</th>\r\n  <th>{props.transaction.price}</th>\r\n</tr>\r\n};\r\n\r\nexport default TransactionItem;","import * as React from \"react\";\r\nimport { Transaction } from \"../actions/types\";\r\nimport { ApplicationState } from \"../reducers\";\r\nimport { ThunkDispatch } from \"redux-thunk\";\r\nimport { getPortfolioTransactionsCreator, deleteTransactionsCreator } from \"../actions/protfolioActions\";\r\nimport { connect } from \"react-redux\";\r\nimport TransactionItem from \"./TransactionItem\";\r\n\r\nexport interface TransactionsProps {\r\n  loadTransactions: Function;\r\n  deleteTransactions: Function;\r\n  transactions: Transaction[];\r\n}\r\n\r\ninterface TransactionFormState {\r\n  selectedTransactionIds : Set<string>\r\n}\r\n\r\nclass Transactions extends React.Component<TransactionsProps,TransactionFormState> {\r\n  \r\n  constructor(props: TransactionsProps) {\r\n    super(props);\r\n    this.state = {\r\n      selectedTransactionIds : new Set()\r\n    }\r\n    this.handleSubmit=this.handleSubmit.bind(this);\r\n    this.handleCheckboxChange=this.handleCheckboxChange.bind(this);\r\n  }\r\n  \r\n  componentDidMount() {\r\n    this.props.loadTransactions();\r\n  }\r\n\r\n  handleCheckboxChange = (event : React.ChangeEvent<HTMLInputElement>) => {\r\n    this.toggleCheckbox(event.target.value);\r\n  }\r\n\r\n  toggleCheckbox = (transactionId : string) => {\r\n    if(this.state.selectedTransactionIds.has(transactionId)) {\r\n        this.state.selectedTransactionIds.delete(transactionId);\r\n    } else {\r\n      this.state.selectedTransactionIds.add(transactionId);\r\n    }\r\n  }\r\n\r\n  handleSubmit(e: React.FormEvent<HTMLFormElement>) {\r\n    e.preventDefault();\r\n    console.log(e.target)\r\n    this.props.deleteTransactions(Array.from(this.state.selectedTransactionIds));\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <React.Fragment>\r\n        <form onSubmit={this.handleSubmit}>\r\n        <table className=\"table table-hover\">\r\n          <thead>\r\n            <tr>\r\n              <th>#</th>\r\n              <th>Transaction Id</th>\r\n              <th>Symbol</th>\r\n              <th>Type</th>\r\n              <th>Quantity</th>\r\n              <th>Price</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n              {this.props.transactions.map((transaction, index) => (\r\n                <TransactionItem key={transaction.id} handleCheckboxChange = {this.handleCheckboxChange} transaction={transaction} />\r\n              ))}\r\n          </tbody>\r\n        </table>\r\n        <button name=\"deleteTransactionBtn\" type=\"submit\">Delete Transactions</button>    \r\n        </form>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: ApplicationState) => {\r\n  return { transactions: state.portfolioTransactions.transactions };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: ThunkDispatch<{}, {}, any>) => ({\r\n  loadTransactions: (transactionType?: string) =>\r\n    dispatch(getPortfolioTransactionsCreator(transactionType)),\r\n  deleteTransactions : (transactionIds : string[]) => \r\n    dispatch(deleteTransactionsCreator(transactionIds))\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Transactions);\r\n","import * as React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport interface IAppProps {\r\n}\r\n\r\nclass Header extends React.Component<IAppProps, any> {\r\n  public render() {\r\n    return (\r\n      <nav className=\"navbar navbar-expand-sm  navbar-light crypt_nav\">\r\n      <div className=\"container-fluid\" >\r\n        <div className=\"navbar-header\">\r\n          <a className=\"navbar-brand\" href=\"#\">Spring - Crypto Portfolio</a>\r\n        </div>\r\n      <ul className=\"nav navbar-nav\">\t\t\r\n        <li className=\"nav-item active\">\r\n        <Link className=\"nav-link\" to=\"/portfolio\">Home</Link>\r\n        </li>\r\n            <li className=\"nav-item\">\r\n            <Link className=\"nav-link\" to=\"/portfolio/transactions\">Transactions</Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n            <Link className=\"nav-link\" to=\"/support\">Support</Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n            <Link className=\"nav-link\" to=\"/support/admin\">Admin</Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n            <Link className=\"nav-link\" to=\"/logout\">Logout</Link>\r\n            </li>\r\n          </ul>\r\n          <ul className=\"nav navbar-nav navbar-right\">\r\n            <li className=\"nav-item\">\r\n              User: Bob\r\n            </li>\r\n          </ul>\r\n            \r\n      </div>\r\n    </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n\r\n","import * as React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Route, Switch } from \"react-router\";\r\nimport { ThunkDispatch } from \"redux-thunk\";\r\nimport { getPortfolioPositionsCreator } from \"../actions/protfolioActions\";\r\nimport { Position } from \"../actions/types\";\r\nimport { ApplicationState } from \"../reducers\";\r\nimport Positions from \"./Positions\";\r\nimport Transactions from \"./Transactions\";\r\nimport Header from './Header';\r\n\r\nexport interface AppProps {\r\n  loadPositions: Function;\r\n  positions: Position[];\r\n}\r\n\r\nclass Portfolio extends React.Component<AppProps> {\r\n  componentDidMount() {\r\n    this.props.loadPositions();\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <div className=\"container\">\r\n      <Header/>\r\n      <Switch>\r\n        <Route path=\"/portfolio/transactions\" component={Transactions} />\r\n        <Route path=\"/portfolio\" component={() => <Positions positions={this.props.positions} />}/>\r\n        </Switch>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: ApplicationState) => {\r\n  return { positions: state.portfolio.positions };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: ThunkDispatch<{}, {}, any>) => ({\r\n  loadPositions: () => dispatch(getPortfolioPositionsCreator())\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Portfolio);\r\n","import {PortfolioState, GotPositionsAction, PortfolioActions, TransactionsState, PortfolioTransactionsAction, SupportState, SupportActions} from \"../actions/types\";\r\nimport { stat } from \"fs\";\r\nimport { Reducer } from \"redux\";\r\nimport Positions from \"../components/Positions\";\r\n\r\nconst portfolioInitialState : PortfolioState = {positions : []}\r\n\r\nexport const portfolioReducer : Reducer<PortfolioState, PortfolioActions> = (\r\n    state = portfolioInitialState, action \r\n    ) => {\r\n        switch(action.type) {\r\n            case \"GotPositions\" : {\r\n                return {positions: action.positions};\r\n            }\r\n            default:\r\n                return state;\r\n        }\r\n    };\r\n\r\nconst supportInitialState : SupportState = {queries : []}\r\n\r\nexport const supportReducer : Reducer<SupportState, SupportActions> = (\r\n    state = supportInitialState, action \r\n    ) => {\r\n        switch(action.type) {\r\n            case \"GotSupportQueries\" : {                \r\n                return {queries: action.queries };\r\n            }\r\n            default:\r\n                return state;\r\n        }\r\n    };\r\n    \r\nconst portfolioTransactionsInitialState : TransactionsState = {transactions: []}\r\n\r\n\r\nexport const portfolioTransactionsReducer : Reducer<TransactionsState, PortfolioTransactionsAction> = (\r\n    state = portfolioTransactionsInitialState , action\r\n) => {\r\n    switch(action.type) {\r\n        case 'GotTransactions' : {\r\n            return {transactions: action.transactions}\r\n        }\r\n        default:\r\n        return state;\r\n    }\r\n    \r\n}","import {combineReducers} from \"redux\";\r\nimport { portfolioReducer, portfolioTransactionsReducer, supportReducer } from \"./portfolioReducer\";\r\nimport {PortfolioState, TransactionsState, SupportState} from '../actions/types'\r\n\r\nexport interface ApplicationState {\r\n    portfolio : PortfolioState;\r\n    portfolioTransactions : TransactionsState;\r\n    support: SupportState; \r\n}\r\n\r\nexport default combineReducers<ApplicationState>({\r\n    portfolio:portfolioReducer,\r\n    portfolioTransactions: portfolioTransactionsReducer,\r\n    support: supportReducer\r\n});\r\n\r\n\r\n","import * as React from 'react';\r\nimport { AuthService } from '../../services/AuthService';\r\n\r\ninterface LoginFormProps {\r\n    login?: Function;\r\n}\r\n\r\ninterface LoginFormState {\r\n}\r\n\r\nclass LoginForm extends React.Component<LoginFormState, any> {\r\n\r\n    private authService: AuthService;\r\n\r\n    constructor(props:LoginFormProps) {\r\n        super(props);\r\n        this.authService = AuthService.getInstance();\r\n        this.state = {\r\n\r\n        }\r\n        this.handleSubmit=this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleSubmit(e: React.FormEvent<HTMLFormElement>) {\r\n        e.preventDefault();\r\n        this.authService.login();\r\n    }\r\n\r\n  public render() {\r\n    return (\r\n        <div className=\"container add_trans_div\">\r\n            <form onSubmit={this.handleSubmit}>\r\n\t\t\t\t    <button name=\"loginFormBtn\" type=\"submit\">Login</button>               \r\n            </form>\r\n\t    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LoginForm;\r\n","import * as React from 'react';\r\nimport {Redirect, Route, RouteProps} from 'react-router';\r\n\r\nexport interface ProtectedRouteProps extends RouteProps {\r\n    isAuthenticated: boolean;\r\n    authenticationPath: string;\r\n}\r\n\r\nexport class ProtectedRoute extends Route<ProtectedRouteProps> {\r\n    public render() {\r\n        let redirectPath: string = '';\r\n        if (!this.props.isAuthenticated) {\r\n            redirectPath = this.props.authenticationPath;\r\n        }\r\n\r\n        if (redirectPath) {\r\n            const renderComponent = () => (<Redirect to={{pathname: redirectPath}}/>);\r\n            return <Route {...this.props} component={renderComponent} render={undefined}/>;\r\n        } else {\r\n            return <Route {...this.props}/>;\r\n        }\r\n    }\r\n}","import * as React from 'react';\r\nimport { SupportQuery } from '../../actions/types';\r\n\r\ninterface QueryItemProps {\r\n    query: SupportQuery,\r\n    onTableRowClick(e: React.MouseEvent<HTMLTableRowElement>): void\r\n}\r\n\r\nconst QueryItem: React.SFC<QueryItemProps>  = (props) => {\r\n    const query = props.query;\r\n    return <tr onClick={props.onTableRowClick} id = {query.id}>\r\n        <th>{query.subject}</th>\r\n        <th>{query.username}</th>\r\n        <th>{query.resolved}</th>\r\n        <th>{query.creationTime}</th>\r\n    </tr>\r\n}\r\n\r\nexport default QueryItem","import * as React from 'react';\r\nimport { SupportQueryPost } from '../../actions/types';\r\n\r\ninterface QueryPostProps {\r\n    post: SupportQueryPost;\r\n}\r\n\r\nconst QueryPost: React.SFC<QueryPostProps>  = (props) => {\r\n    const post = props.post;\r\n    return <tr>\r\n        <th>Query</th>\r\n        <th>{post.content}</th>\r\n    </tr>\r\n}\r\n\r\nexport default QueryPost;","import * as React from \"react\";\r\nimport { SupportQuery } from \"../../actions/types\";\r\nimport QueryItem from \"./QueryItem\";\r\nimport QueryPosts from \"./QueryPosts\";\r\nimport QueryPost from \"./QueryPost\";\r\n\r\n\r\ninterface QueriesProps {\r\n  queries: SupportQuery[];\r\n}\r\n\r\nclass Queries extends React.Component<QueriesProps,any> {\r\n  \r\n  constructor(props:QueriesProps) {\r\n      super(props);\r\n      this.state = {\r\n        displayPostsForQuery: \"\"\r\n      }\r\n      this.onTableRowClick=this.onTableRowClick.bind(this);\r\n  }\r\n\r\n  private onTableRowClick(e: React.MouseEvent<HTMLTableRowElement>) {\r\n    this.setState({displayPostsForQuery : e.currentTarget.id});\r\n  }\r\n\r\n  public render() {\r\n    let queriesList : SupportQuery[] = [];\r\n    if(this.props.queries) {\r\n      queriesList = this.props.queries;\r\n    }\r\n    if(this.state.displayPostsForQuery) {\r\n        const query = queriesList.find((q) => q.id === this.state.displayPostsForQuery);\r\n        if (query) {\r\n          return (<React.Fragment>\r\n            <table>\r\n            <tr><td>Subject</td><td>{query.subject}</td></tr>\r\n            <QueryPost post = {query.posts[0]}/>\r\n            </table>\r\n          </React.Fragment>);\r\n        }\r\n    }\r\n    return (\r\n      <React.Fragment>\r\n        <table className=\"table table-hover\">\r\n          <thead>\r\n            <tr>\r\n              <th>Subject</th>\r\n              <th>Username</th>\r\n              <th>Resolved</th>\r\n              <th>Created</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {queriesList.map(query => (\r\n              <QueryItem onTableRowClick={this.onTableRowClick}\r\n                key={query.creationTime}\r\n                query={query}\r\n              />\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Queries;\r\n","import axios from \"axios\";\r\nimport {GotSupportQueriesAction, SupportState, AddQueryAction, SupportQuery} from \"./types\";\r\nimport { ActionCreator, Dispatch } from \"redux\";\r\nimport { ThunkAction, ThunkDispatch } from \"redux-thunk\";\r\nimport { AuthService } from \"../services/AuthService\";\r\n\r\nexport const getSupportQueriesCreator: ActionCreator<\r\nThunkAction<\r\n    void,\r\n    undefined,\r\n    null,\r\n    GotSupportQueriesAction\r\n    >\r\n> = () => {\r\n    return async (dispatch : Dispatch) => {\r\n        const response = await axios.get('http://localhost:8180/support',\r\n        {headers:AuthService.getInstance().getHeader()});\r\n        const queries : SupportQuery[] = response.data;\r\n        const gotSupportQueriesAction : GotSupportQueriesAction = {\r\n            type : \"GotSupportQueries\",\r\n            queries: queries\r\n        };  \r\n        dispatch(gotSupportQueriesAction);\r\n    };\r\n};\r\n\r\nexport const addQueryCreator : ActionCreator<\r\n    ThunkAction<\r\n        void,\r\n        undefined,\r\n        null,\r\n        AddQueryAction\r\n    >\r\n    > = (query: AddQueryAction) => {\r\n        console.log(query);\r\n        \r\n        return async (dispatch :  ThunkDispatch<{},{},any>) => {\r\n            const response = await axios.put('http://localhost:8180/support', query,\r\n            {headers: AuthService.getInstance().getHeader()});\r\n            dispatch(getSupportQueriesCreator());\r\n        }\r\n    }","import * as React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport { ThunkDispatch } from 'redux-thunk';\r\nimport { History } from 'history';\r\nimport { AddQueryAction } from '../../actions/types';\r\nimport { addQueryCreator } from '../../actions/supportActions';\r\nimport { Redirect } from 'react-router';\r\n\r\ninterface AddQueryFormProps {\r\n    addQuery?: Function;\r\n}\r\n\r\nclass AddQueryForm extends React.Component<AddQueryFormProps, any> {\r\n\r\n    constructor(props:AddQueryFormProps) {\r\n        super(props);\r\n        this.state = {\r\n            subject: \"\",\r\n            content: \"\",\r\n            navToMainSupportPage: false\r\n            \r\n        }\r\n        this.onChange=this.onChange.bind(this);\r\n        this.handleSubmit=this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleSubmit(e: React.FormEvent<HTMLFormElement>) {\r\n        e.preventDefault();\r\n        const query = {\r\n            subject: this.state.subject,\r\n            content: this.state.content        };\r\n        if(this.props.addQuery !== undefined) {\r\n            this.setState({\r\n                subject: \"\",\r\n                content: \"\",\r\n                navToMainSupportPage: true\r\n            });\r\n            this.props.addQuery(query);\r\n        }\r\n    }\r\n\r\n    onChange(e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) {\r\n        this.setState({ [e.target.name]: e.target.value});\r\n    }\r\n\r\n  public render() {\r\n      if(this.state.navToMainSupportPage) {\r\n         return <Redirect to='/support'/>\r\n      }\r\n    return (\r\n        <div className=\"form-group\">\r\n            <form className=\"form-horizontal\" onSubmit={this.handleSubmit}>\r\n                <fieldset>\r\n                <div className=\"form-group\">\r\n                    <label className=\"col-sm-2 control-label\">Subject</label>\r\n                    <input type =\"string\" name = \"subject\" required={true} value={this.state.subject} onChange={this.onChange}/>\r\n                </div>\r\n                <div className=\"form-group\"> \r\n                    <label className=\"col-sm-2 control-label\">Query</label>\r\n                    <textarea name = \"content\" required={true} value={this.state.content} onChange={this.onChange}/>\r\n\t\t\t\t</div>  \r\n                    <button name=\"addQueryBtn\" type=\"submit\">Add Query</button>               \r\n                </fieldset>\r\n            </form>\r\n\t    </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch : ThunkDispatch<{},{},any>) => ({\r\n    addQuery: (query: AddQueryAction, history: History) => dispatch(addQueryCreator(query, history))\r\n  });\r\n\r\nexport default connect(null,mapDispatchToProps)(AddQueryForm);","import * as React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Route, Switch } from \"react-router\";\r\nimport { ThunkDispatch } from \"redux-thunk\";\r\n\r\nimport { SupportQuery, SupportState } from \"../../actions/types\";\r\nimport Header from \"../Header\";\r\nimport Queries from \"./Queries\";\r\nimport { getSupportQueriesCreator } from \"../../actions/supportActions\";\r\nimport { Link } from \"react-router-dom\";\r\nimport AddQueryForm from \"./AddQueryForm\";\r\nimport { ApplicationState } from \"../../reducers\";\r\n\r\nexport interface AppProps {\r\n  loadQueries: Function;\r\n  queries: SupportQuery[];\r\n}\r\n\r\nclass UserSupport extends React.Component<AppProps> {\r\n  componentDidMount() {\r\n    this.props.loadQueries();\r\n  }\r\n\r\n  public render() {    \r\n    return (\r\n      <div className=\"container\">\r\n      <Header/>\r\n      <Link className=\"nav-link\" to=\"/support/compose_query\">Add New</Link>\r\n      <Switch>\r\n        <Route path =\"/support/compose_query\" component = {AddQueryForm}/>\r\n        <Route path=\"/support\" component={() => <Queries queries={this.props.queries} />}/>\r\n      </Switch>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: ApplicationState) => {\r\n  return { queries: state.support.queries };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: ThunkDispatch<{}, {}, any>) => ({  \r\n  loadQueries: () => dispatch(getSupportQueriesCreator())\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(UserSupport);\r\n","import React, { Component} from 'react';\nimport { Provider } from 'react-redux';\nimport './App.css';\nimport Portfolio from './components/Portfolio';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport store from \"./store/store\";\nimport Header from './components/Header';\nimport RegistrationForm from './components/registration/RegistrationForm';\nimport LoginForm from './components/login/LoginForm';\nimport Callback from './components/login/Callback';\nimport { ProtectedRouteProps, ProtectedRoute } from './components/login/ProtectedRoute';\nimport { AuthService } from './services/AuthService';\nimport Queries from './components/support/Queries';\nimport UserSupport from './components/support/UserSupport';\n\n\nclass App extends Component {\n\n initialState = {};\n\n  render() {\n    const defaultProtectedRouteProps: ProtectedRouteProps = {\n      isAuthenticated: AuthService.getInstance().isAuthenticated(),\n      authenticationPath: '/login',\n    };\n    return (\n      <Provider store = {store(this.initialState)}>\n      <Router>\n        <div className=\"App\">\n        <Route path=\"/login\" component={LoginForm} />\n        <ProtectedRoute\n        {...defaultProtectedRouteProps}\n          exact={true}\n            path='/portfolio'\n            component={Portfolio}/>  \n        <ProtectedRoute\n        {...defaultProtectedRouteProps}\n          exact={true}\n            path='/portfolio/*'\n            component={Portfolio}/>\n        <ProtectedRoute\n        {...defaultProtectedRouteProps}\n         \n            path='/support'\n            component={UserSupport}/>                \n        </div>\n      </Router>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","import {createStore,applyMiddleware,compose, Store, StoreCreator} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from \"../reducers\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\n\r\nexport default function configureStore(initialState: any) {\r\n\r\n    return createStore(rootReducer,initialState,\r\n        compose(applyMiddleware(thunk)));\r\n\r\n};\r\n    ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}